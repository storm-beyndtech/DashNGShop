import { useState, useEffect, useCallback, useRef } from 'react';
import { Helmet } from 'react-helmet';
import AdminDashboardLayout from '@/components/admin/AdminDashboardLayout';
import NewProductForm from '@/components/admin/NewProductForm';
import { useAuth } from '@/hooks/use-auth';
import { useLocation } from 'wouter';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle,
  CardFooter
} from '@/components/ui/card';
import { 
  Search,
  Filter,
  Plus,
  RefreshCw,
  ArrowUpDown,
  Edit,
  Trash2,
  Loader2,
  AlertTriangle,
  CheckCircle,
  ArrowUpRight,
  ArrowDownRight,
  Upload,
  Image as ImageIcon,
  Package,
  X,
  FileText
} from 'lucide-react';
import { 
  Button,
  buttonVariants
} from '@/components/ui/button';
import { AnimatedButton, AnimatedCard, AnimatedListItem, useClickAnimation, ClickAnimation } from '@/components/ui/animated-feedback';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { apiRequest } from '@/lib/queryClient';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Progress } from '@/components/ui/progress';
import { Separator } from '@/components/ui/separator';
import { toast } from '@/hooks/use-toast';

// Define product interface
interface Product {
  id: number;
  name: string;
  brand: string;
  category: string;
  subcategory: string;
  price: number;
  discountPrice: number;
  quantity: number;
  storeQuantity: number;
  sku: string;
  barcode: string;
  lastUpdated: string;
  status: 'in-stock' | 'low-stock' | 'out-of-stock';
  description?: string; // Optional product description field
}

// Inventory management component
const AdminInventory = () => {
  const { user, isLoading } = useAuth();
  const [, navigate] = useLocation();
  const [products, setProducts] = useState<Product[]>([]);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [sortConfig, setSortConfig] = useState<{ key: keyof Product; direction: 'asc' | 'desc' } | null>(null);
  const [currentTab, setCurrentTab] = useState<'all' | 'in-stock' | 'low-stock' | 'out-of-stock'>('all');
  const [isProductsLoading, setIsProductsLoading] = useState(true);
  const [addStockDialogOpen, setAddStockDialogOpen] = useState(false);
  const [productDetailsDialogOpen, setProductDetailsDialogOpen] = useState(false);
  // New product form state
  const [newProduct, setNewProduct] = useState({
    name: '',
    brand: '',
    category: '',
    subcategory: '',
    price: 0,
    discountPrice: 0,
    quantity: 0,
    storeQuantity: 0,
    sku: '',
    barcode: '',
    description: '',
    images: [] as File[]
  });
  
  const [newProductDialogOpen, setNewProductDialogOpen] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [stockToAdd, setStockToAdd] = useState(0);
  const [stockLocation, setStockLocation] = useState<'store' | 'warehouse'>('store');
  const [isUpdatingStock, setIsUpdatingStock] = useState(false);
  const [isAddingProduct, setIsAddingProduct] = useState(false);
  
  // When dialog opens/closes, reset form state
  // Optimize form initialization to prevent flickering
  useEffect(() => {
    if (newProductDialogOpen) {
      // Initialize inputValues with current newProduct values - only once when dialog opens
      setInputValues(prev => ({
        ...prev,
        name: newProduct.name,
        brand: newProduct.brand,
        category: newProduct.category,
        subcategory: newProduct.subcategory,
        description: newProduct.description,
        price: newProduct.price.toString(),
        discountPrice: newProduct.discountPrice.toString(),
        quantity: newProduct.quantity.toString(),
        storeQuantity: newProduct.storeQuantity.toString(),
        sku: newProduct.sku,
        barcode: newProduct.barcode
      }));
    } else {
      // Reset all form timeouts when dialog closes to prevent late updates
      if (descriptionTimeoutRef.current) clearTimeout(descriptionTimeoutRef.current);
      
      // Reset the newProduct state when dialog is closed
      setNewProduct({
        name: '',
        brand: '',
        category: '',
        subcategory: '',
        price: 0,
        discountPrice: 0,
        quantity: 0,
        storeQuantity: 0,
        sku: '',
        barcode: '',
        description: '',
        images: []
      });
      
      // Reset image previews when dialog closes
      imagePreviews.forEach(preview => URL.revokeObjectURL(preview));
      setImagePreviews([]);
    }
  }, [newProductDialogOpen]); // Only depends on dialog open state, not on form values
  
  // Initialize search field
  useEffect(() => {
    setInputValues(prev => ({
      ...prev,
      search: searchQuery
    }));
  }, []);
  
  // Input values for debounced inputs
  const [inputValues, setInputValues] = useState({
    name: '',
    brand: '',
    category: '',
    subcategory: '',
    description: '',
    search: '',
    price: '',
    discountPrice: '',
    quantity: '',
    storeQuantity: '',
    sku: '',
    barcode: ''
  });
  
  // Debounce handlers for text inputs with proper cleanup
  const descriptionTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  
  // Debounced search update function
  const updateSearchDebounced = useCallback((value: string) => {
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }
    
    searchTimeoutRef.current = setTimeout(() => {
      setSearchQuery(value);
    }, 300);
  }, []);
  
  // Debounced description update function
  const updateDescriptionDebounced = useCallback((value: string) => {
    if (descriptionTimeoutRef.current) {
      clearTimeout(descriptionTimeoutRef.current);
    }
    
    descriptionTimeoutRef.current = setTimeout(() => {
      setNewProduct(prev => ({
        ...prev,
        description: value
      }));
    }, 300);
  }, []);
  
  // Clean up timeouts on component unmount
  useEffect(() => {
    return () => {
      if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);
      if (descriptionTimeoutRef.current) clearTimeout(descriptionTimeoutRef.current);
    };
  }, []);
  
  // Preview images
  const [imagePreviews, setImagePreviews] = useState<string[]>([]);
  
  // Get the current user role
  const userRole = (): 'admin' | 'manager' | 'storekeeper' | 'sales' => {
    if (!user) return 'sales'; // Default fallback
    
    if (user.username === 'owner') return 'admin';
    if (user.username.startsWith('storekeeper')) return 'storekeeper';
    if (user.username.startsWith('salesperson')) return 'sales';
    if (user.username.startsWith('manager')) return 'manager';
    
    // Check if user has admin role but is not the owner
    if (user.isAdmin && user.username !== 'owner') return 'manager';
    
    // Fallback for other cases
    return 'sales';
  };
  
  const role = userRole();
  
  // Check if user can edit inventory
  const canEditInventory = ['admin', 'manager', 'storekeeper'].includes(role);
  
  // Summary stats
  const [inventorySummary, setInventorySummary] = useState({
    totalProducts: 0,
    totalValue: 0,
    lowStockItems: 0,
    outOfStockItems: 0,
    recentlyUpdated: 0 // last 24 hours
  });
  
  // Fetch products
  useEffect(() => {
    const fetchProducts = async () => {
      setIsProductsLoading(true);
      try {
        // In a real app, this would be an API call to fetch products
        // For this demo, let's create some sample data
        
        const response = await apiRequest('GET', '/api/products');
        const productData = await response.json();
        
        // Transform the data to match our Product interface
        const transformedProducts: Product[] = productData.map((item: any) => {
          // Determine status based on quantity
          let status: 'in-stock' | 'low-stock' | 'out-of-stock' = 'in-stock';
          if (item.quantity <= 0) {
            status = 'out-of-stock';
          } else if (item.quantity < 5) {
            status = 'low-stock';
          }
          
          return {
            id: item.id,
            name: item.name,
            brand: item.brand || 'Unknown',
            category: item.category,
            subcategory: item.subcategory,
            price: item.price,
            discountPrice: item.discountPrice || item.price,
            quantity: item.quantity || 0,
            storeQuantity: item.storeQuantity || 0,
            sku: item.sku || `SKU-${item.id}`,
            barcode: item.barcode || `BAR-${item.id}`,
            lastUpdated: new Date().toISOString(),
            description: item.description || '',
            status
          };
        });
        
        setProducts(transformedProducts);
        setFilteredProducts(transformedProducts);
        
        // Calculate summary stats
        const totalValue = transformedProducts.reduce((acc, prod) => acc + prod.price * (prod.quantity + prod.storeQuantity), 0);
        const lowStockItems = transformedProducts.filter(p => p.status === 'low-stock').length;
        const outOfStockItems = transformedProducts.filter(p => p.status === 'out-of-stock').length;
        
        setInventorySummary({
          totalProducts: transformedProducts.length,
          totalValue,
          lowStockItems,
          outOfStockItems,
          recentlyUpdated: Math.floor(transformedProducts.length * 0.2) // 20% for demo purposes
        });
      } catch (error) {
        console.error('Error fetching products:', error);
        toast({
          title: "Error fetching products",
          description: "Failed to load product data. Please try again.",
          variant: "destructive"
        });
      } finally {
        setIsProductsLoading(false);
      }
    };
    
    fetchProducts();
  }, []);
  
  // Filter and sort products when search, category or tab changes
  useEffect(() => {
    let result = [...products];
    
    // Filter by search query
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter(
        product => 
          product.name.toLowerCase().includes(query) ||
          product.brand.toLowerCase().includes(query) ||
          product.sku.toLowerCase().includes(query) ||
          product.barcode.toLowerCase().includes(query)
      );
    }
    
    // Filter by category
    if (selectedCategory !== 'all') {
      result = result.filter(product => product.category.toLowerCase() === selectedCategory.toLowerCase());
    }
    
    // Filter by status tab
    if (currentTab !== 'all') {
      result = result.filter(product => product.status === currentTab);
    }
    
    // Apply sorting
    if (sortConfig !== null) {
      result.sort((a, b) => {
        const key = sortConfig.key;
        const direction = sortConfig.direction;
        
        // Handle string comparisons
        if (typeof a[key] === 'string' && typeof b[key] === 'string') {
          return direction === 'asc' 
            ? (a[key] as string).localeCompare(b[key] as string)
            : (b[key] as string).localeCompare(a[key] as string);
        }
        
        // Handle number comparisons
        if (typeof a[key] === 'number' && typeof b[key] === 'number') {
          return direction === 'asc'
            ? (a[key] as number) - (b[key] as number)
            : (b[key] as number) - (a[key] as number);
        }
        
        // Default case
        return 0;
      });
    }
    
    setFilteredProducts(result);
  }, [products, searchQuery, selectedCategory, currentTab, sortConfig]);
  
  // Handle sorting
  const requestSort = (key: keyof Product) => {
    let direction: 'asc' | 'desc' = 'asc';
    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };
  
  // Generate random SKU for new products
  const generateSKU = (brand: string, name: string) => {
    const brandPrefix = brand.substring(0, 3).toUpperCase();
    const namePrefix = name.substring(0, 3).toUpperCase();
    const random = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
    return `${brandPrefix}-${namePrefix}-${random}`;
  };
  
  // Generate random barcode for new products
  const generateBarcode = () => {
    return `DASH${Math.floor(Math.random() * 10000000000).toString().padStart(10, '0')}`;
  };

  // Handle updating stock
  const handleAddStock = async () => {
    if (!selectedProduct || stockToAdd <= 0) return;
    
    setIsUpdatingStock(true);
    try {
      // In a real app, you would send an API request to update the stock
      // For this demo, we'll just update the local state
      
      const updatedProducts = products.map(product => {
        if (product.id === selectedProduct.id) {
          const updatedProduct = { ...product };
          
          if (stockLocation === 'store') {
            updatedProduct.storeQuantity += stockToAdd;
          } else {
            updatedProduct.quantity += stockToAdd;
          }
          
          // Recalculate status
          if (updatedProduct.quantity + updatedProduct.storeQuantity <= 0) {
            updatedProduct.status = 'out-of-stock';
          } else if (updatedProduct.quantity + updatedProduct.storeQuantity < 5) {
            updatedProduct.status = 'low-stock';
          } else {
            updatedProduct.status = 'in-stock';
          }
          
          updatedProduct.lastUpdated = new Date().toISOString();
          return updatedProduct;
        }
        return product;
      });
      
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      setProducts(updatedProducts);
      
      toast({
        title: "Stock updated successfully",
        description: `Added ${stockToAdd} units to ${selectedProduct.name} (${stockLocation}).`,
        variant: "default"
      });
      
      // Close dialog and reset form
      setAddStockDialogOpen(false);
      setSelectedProduct(null);
      setStockToAdd(0);
    } catch (error) {
      console.error('Error updating stock:', error);
      toast({
        title: "Error updating stock",
        description: "Failed to update product stock. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsUpdatingStock(false);
    }
  };
  
  // Handle image upload
  const clickAnimation = useClickAnimation();
  
  // Function to trigger animation at current cursor position
  const triggerAnimation = (e?: React.MouseEvent) => {
    if (e) {
      clickAnimation.addClick(e.clientX, e.clientY);
    } else {
      // If no event provided, use center of viewport
      clickAnimation.addClick(window.innerWidth / 2, window.innerHeight / 2);
    }
  };
  
  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files) return;
    
    // Convert FileList to array
    const fileArray = Array.from(files);
    
    // Limit to 5 images
    if (newProduct.images.length + fileArray.length > 5) {
      toast({
        title: "Too many images",
        description: "You can upload a maximum of 5 images per product.",
        variant: "destructive"
      });
      return;
    }
    
    // Update image files
    setNewProduct({
      ...newProduct,
      images: [...newProduct.images, ...fileArray]
    });
    
    // Create URL previews
    const newPreviews = fileArray.map(file => URL.createObjectURL(file));
    setImagePreviews([...imagePreviews, ...newPreviews]);
    
    // Show success animation
    if (fileArray.length > 0) {
      toast({
        title: `${fileArray.length} image${fileArray.length > 1 ? 's' : ''} added`,
        description: "Images have been added to the product.",
        variant: "default",
      });
      
      // Trigger click animation at cursor position
      triggerAnimation();
    }
  };
  
  // Remove image
  const removeImage = (index: number) => {
    const updatedImages = [...newProduct.images];
    updatedImages.splice(index, 1);
    
    const updatedPreviews = [...imagePreviews];
    URL.revokeObjectURL(updatedPreviews[index]); // Free up memory
    updatedPreviews.splice(index, 1);
    
    setNewProduct({
      ...newProduct,
      images: updatedImages
    });
    setImagePreviews(updatedPreviews);
    
    // Show animation and feedback when image is removed
    toast({
      title: "Image removed",
      description: `Image ${index + 1} has been removed from the product.`,
      variant: "default",
    });
    
    // Trigger click animation at cursor position
    triggerAnimation();
  };

  // Reset the form state
  const resetForm = () => {
    // Clean up image previews before resetting
    imagePreviews.forEach(preview => URL.revokeObjectURL(preview));
    
    setNewProduct({
      name: '',
      brand: '',
      category: '',
      subcategory: '',
      price: 0,
      discountPrice: 0,
      quantity: 0,
      storeQuantity: 0,
      sku: '',
      barcode: '',
      description: '',
      images: []
    });
    setImagePreviews([]);
  };

  // Handle adding a new product
  const handleAddProduct = async () => {
    if (!newProduct.name || !newProduct.brand || !newProduct.category || !newProduct.subcategory || !newProduct.description) {
      toast({
        title: "Missing required fields",
        description: "Please fill in all required fields.",
        variant: "destructive"
      });
      return;
    }
    
    if (newProduct.price <= 0) {
      toast({
        title: "Invalid price",
        description: "Please enter a valid price for the product.",
        variant: "destructive"
      });
      return;
    }
    
    setIsAddingProduct(true);
    try {
      // Generate SKU and barcode if not provided
      const productToAdd = {
        ...newProduct,
        sku: newProduct.sku || generateSKU(newProduct.brand, newProduct.name),
        barcode: newProduct.barcode || generateBarcode()
      };
      
      // Create a plain object for the JSON request
      const productData = {
        name: productToAdd.name,
        brand: productToAdd.brand,
        category: productToAdd.category,
        subcategory: productToAdd.subcategory,
        description: productToAdd.description,
        price: Number(productToAdd.price) || 0,
        discountPrice: Number(productToAdd.discountPrice) || Number(productToAdd.price) || 0,
        quantity: Number(productToAdd.quantity) || 0,
        storeQuantity: Number(productToAdd.storeQuantity) || 0,
        sku: productToAdd.sku,
        barcode: productToAdd.barcode,
        // Set default values for required fields
        images: ["default-product-image.jpg"],
        inStock: true,
        inStoreAvailable: Boolean(productToAdd.storeQuantity > 0)
      };
      
      console.log('Sending product data:', productData);
      
      // Create the product with JSON data
      const productResponse = await fetch('/api/products', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(productData),
        credentials: 'include'
      });
      
      if (!productResponse.ok) {
        let errorMessage = 'Failed to create product';
        try {
          const errorData = await productResponse.json();
          console.error('Product creation error:', errorData);
          errorMessage = errorData.message || errorMessage;
          
          // Check for validation errors
          if (errorData.errors && errorData.errors.length > 0) {
            const validationErrors = errorData.errors.map((err: any) => `${err.path}: ${err.message}`).join(', ');
            errorMessage = `Validation errors: ${validationErrors}`;
          }
        } catch (e) {
          console.error('Error parsing error response:', e);
        }
        throw new Error(errorMessage);
      }
      
      const addedProduct = await productResponse.json();
      console.log('Product created successfully:', addedProduct);
      
      // Determine status based on quantity
      let status: 'in-stock' | 'low-stock' | 'out-of-stock' = 'in-stock';
      const totalQuantity = Number(addedProduct.quantity || 0) + Number(addedProduct.storeQuantity || 0);
      
      if (totalQuantity <= 0) {
        status = 'out-of-stock';
      } else if (totalQuantity < 5) {
        status = 'low-stock';
      }
      
      // Add the new product to the list
      const newProductWithStatus: Product = {
        ...addedProduct,
        status,
        description: addedProduct.description || '',
        lastUpdated: new Date().toISOString()
      };
      
      setProducts(prev => [...prev, newProductWithStatus]);
      
      // Update inventory summary
      setInventorySummary(prev => ({
        ...prev,
        totalProducts: prev.totalProducts + 1,
        totalValue: prev.totalValue + (newProductWithStatus.price * (newProductWithStatus.quantity + newProductWithStatus.storeQuantity)),
        lowStockItems: status === 'low-stock' ? prev.lowStockItems + 1 : prev.lowStockItems,
        outOfStockItems: status === 'out-of-stock' ? prev.outOfStockItems + 1 : prev.outOfStockItems,
        recentlyUpdated: prev.recentlyUpdated + 1
      }));
      
      // If we have images, we could upload them here with a separate API call
      // For now we'll skip that to simplify the fix
      
      toast({
        title: "Product added successfully",
        description: `${newProduct.name} has been added to inventory.`,
        variant: "default"
      });
      
      // Close dialog and reset form
      setNewProductDialogOpen(false);
      resetForm();
    } catch (error) {
      console.error('Error adding product:', error);
      toast({
        title: "Error adding product",
        description: "Failed to add new product. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsAddingProduct(false);
    }
  };
  
  // Redirect if not logged in or not authorized
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }
  
  if (!user) {
    navigate("/auth");
    return null;
  }
  
  // Role-based access control - redirect if not admin, manager, storekeeper, or sales
  if (!['admin', 'manager', 'storekeeper', 'sales'].includes(role)) {
    toast({
      title: "Access denied",
      description: "You don't have permission to access the inventory management page.",
      variant: "destructive"
    });
    navigate("/admin/dashboard");
    return null;
  }
  
  // Show read-only warning for sales personnel
  if (role === 'sales') {
    toast({
      title: "Read-only access",
      description: "You have view-only access to the inventory. You cannot make changes.",
      variant: "default"
    });
  }
  
  // Custom AnimationWrapper component specific to inventory management
  const AnimationWrapper = ({ children }: { children: React.ReactNode }) => {
    const [animations, setAnimations] = useState<{id: number, type: string, x: number, y: number}[]>([]);
    
    const addAnimation = (type: string, x: number, y: number) => {
      const id = Date.now();
      setAnimations(prev => [...prev, { id, type, x, y }]);
      
      // Auto-remove animation after completion
      setTimeout(() => {
        setAnimations(prev => prev.filter(anim => anim.id !== id));
      }, 1000);
    };
    
    // Create product animation for "New Product" button
    const createProductAnimation = (e: React.MouseEvent) => {
      addAnimation('create', e.clientX, e.clientY);
    };
    
    // Expose animation methods to parent component
    useEffect(() => {
      (window as any).inventoryAnimations = {
        createProduct: createProductAnimation,
        addAnimation
      };
      
      return () => {
        delete (window as any).inventoryAnimations;
      };
    }, []);
    
    return (
      <div className="relative overflow-hidden">
        {children}
        
        <AnimatePresence>
          {animations.map(animation => (
            <motion.div
              key={animation.id}
              initial={{ scale: 0, opacity: 0.7, x: animation.x, y: animation.y }}
              animate={{ scale: 1, opacity: 0 }}
              exit={{ scale: 0, opacity: 0 }}
              transition={{ duration: 0.6 }}
              className={`absolute rounded-full -translate-x-1/2 -translate-y-1/2 pointer-events-none
                ${animation.type === 'create' ? 'bg-green-500/30 w-16 h-16' : 
                  animation.type === 'remove' ? 'bg-red-500/30 w-14 h-14' : 
                  'bg-primary/30 w-12 h-12'}`}
            />
          ))}
        </AnimatePresence>
      </div>
    );
  };
  
  return (
    <AdminDashboardLayout>
      <AnimationWrapper>
        <Helmet>
          <title>Inventory Management | DASH Fashion</title>
        </Helmet>
      
      {/* Page header with actions */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6 gap-4">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Inventory Management</h2>
          <p className="text-muted-foreground">Track and manage your product inventory.</p>
          {role === 'sales' && (
            <div className="mt-2">
              <Badge variant="secondary" className="bg-blue-100 text-blue-700">Read-Only Mode</Badge>
            </div>
          )}
        </div>
        
        <div className="flex items-center gap-2">
          {canEditInventory && (
            <AnimatedButton 
              className="whitespace-nowrap bg-primary text-primary-foreground h-10 px-4 py-2"
              onClick={(e) => {
                // Trigger custom animation
                if ((window as any).inventoryAnimations) {
                  (window as any).inventoryAnimations.createProduct(e);
                }
                // Open dialog
                setNewProductDialogOpen(true);
              }}
            >
              <Plus className="h-4 w-4 mr-2" />
              New Product
            </AnimatedButton>
          )}
          <AnimatedButton variant="outline" className="whitespace-nowrap h-10 px-4 py-2 border border-input" onClick={() => window.location.reload()}>
            <RefreshCw className="h-4 w-4 mr-2" />
            Refresh
          </AnimatedButton>
        </div>
      </div>
      
      {/* Inventory summary cards */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-5 mb-6">
        <AnimatedCard onClick={() => setCurrentTab('all')} className="cursor-pointer">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Total Products</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{inventorySummary.totalProducts}</div>
          </CardContent>
        </AnimatedCard>
        
        <AnimatedCard className="cursor-default">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Inventory Value</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">₦{(inventorySummary.totalValue / 100).toLocaleString()}</div>
          </CardContent>
        </AnimatedCard>
        
        <AnimatedCard onClick={() => setCurrentTab('low-stock')} className="cursor-pointer">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Low Stock Items</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-amber-500">{inventorySummary.lowStockItems}</div>
          </CardContent>
        </AnimatedCard>
        
        <AnimatedCard onClick={() => setCurrentTab('out-of-stock')} className="cursor-pointer">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Out of Stock</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-rose-500">{inventorySummary.outOfStockItems}</div>
          </CardContent>
        </AnimatedCard>
        
        <AnimatedCard className="cursor-default">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Recently Updated</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{inventorySummary.recentlyUpdated}</div>
            <div className="text-xs text-muted-foreground">In the last 24h</div>
          </CardContent>
        </AnimatedCard>
      </div>
      
      {/* Filters and search */}
      <Card className="mb-6">
        <CardContent className="p-4 md:p-6">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search by name, SKU, barcode..."
                className="pl-10"
                value={inputValues.search}
                onChange={(e) => {
                  const newValue = e.target.value;
                  // Update local state immediately for responsive UI
                  setInputValues(prev => ({
                    ...prev,
                    search: newValue
                  }));
                  
                  // Update search query with direct debounce to prevent excessive filtering
                  if (searchTimeoutRef.current) {
                    clearTimeout(searchTimeoutRef.current);
                  }
                  
                  searchTimeoutRef.current = setTimeout(() => {
                    setSearchQuery(newValue);
                  }, 300);
                }}
              />
            </div>
            
            <div className="flex items-center gap-4">
              <div className="w-[180px]">
                <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                  <SelectTrigger>
                    <SelectValue placeholder="All categories" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All categories</SelectItem>
                    <SelectItem value="women">Women</SelectItem>
                    <SelectItem value="men">Men</SelectItem>
                    <SelectItem value="bags">Bags</SelectItem>
                    <SelectItem value="jewelry">Jewelry</SelectItem>
                    <SelectItem value="accessories">Accessories</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <Button variant="outline" size="icon">
                <Filter className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
      
      {/* Product list with tabs */}
      <Card>
        <CardHeader className="p-4 md:p-6">
          <CardTitle>Product Inventory</CardTitle>
          <CardDescription>
            {role === 'sales' 
              ? "View product inventory details across warehouses and stores." 
              : "Manage your product inventory across warehouses and stores."}
          </CardDescription>
          
          <Tabs value={currentTab} onValueChange={(value) => setCurrentTab(value as any)} className="mt-4">
            <TabsList className="grid grid-cols-4 md:w-[400px]">
              <TabsTrigger value="all">All</TabsTrigger>
              <TabsTrigger value="in-stock">In Stock</TabsTrigger>
              <TabsTrigger value="low-stock">Low Stock</TabsTrigger>
              <TabsTrigger value="out-of-stock">Out of Stock</TabsTrigger>
            </TabsList>
          </Tabs>
        </CardHeader>
        
        <CardContent className="p-0">
          {isProductsLoading ? (
            <div className="flex items-center justify-center p-8">
              <Loader2 className="h-8 w-8 animate-spin text-primary mr-2" />
              <span>Loading inventory data...</span>
            </div>
          ) : filteredProducts.length === 0 ? (
            <div className="flex flex-col items-center justify-center p-8 text-center">
              <AlertTriangle className="h-8 w-8 text-muted-foreground mb-4" />
              <h3 className="font-medium text-lg">No products found</h3>
              <p className="text-muted-foreground max-w-md mt-2">
                {searchQuery || selectedCategory !== 'all' || currentTab !== 'all'
                  ? "Try adjusting your search or filters to find what you're looking for."
                  : "There are no products in your inventory. Add some products to get started."}
              </p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead onClick={() => requestSort('name')} className="cursor-pointer">
                      <div className="flex items-center">
                        Product Name
                        <ArrowUpDown className="ml-2 h-4 w-4" />
                      </div>
                    </TableHead>
                    <TableHead onClick={() => requestSort('brand')} className="cursor-pointer">
                      <div className="flex items-center">
                        Brand
                        <ArrowUpDown className="ml-2 h-4 w-4" />
                      </div>
                    </TableHead>
                    <TableHead onClick={() => requestSort('category')} className="cursor-pointer">
                      <div className="flex items-center">
                        Category
                        <ArrowUpDown className="ml-2 h-4 w-4" />
                      </div>
                    </TableHead>
                    <TableHead onClick={() => requestSort('sku')} className="cursor-pointer">
                      <div className="flex items-center">
                        SKU
                        <ArrowUpDown className="ml-2 h-4 w-4" />
                      </div>
                    </TableHead>
                    <TableHead onClick={() => requestSort('price')} className="cursor-pointer text-right">
                      <div className="flex items-center justify-end">
                        Price
                        <ArrowUpDown className="ml-2 h-4 w-4" />
                      </div>
                    </TableHead>
                    <TableHead onClick={() => requestSort('quantity')} className="cursor-pointer text-right">
                      <div className="flex items-center justify-end">
                        Warehouse Qty
                        <ArrowUpDown className="ml-2 h-4 w-4" />
                      </div>
                    </TableHead>
                    <TableHead onClick={() => requestSort('storeQuantity')} className="cursor-pointer text-right">
                      <div className="flex items-center justify-end">
                        Store Qty
                        <ArrowUpDown className="ml-2 h-4 w-4" />
                      </div>
                    </TableHead>
                    <TableHead onClick={() => requestSort('status')} className="cursor-pointer">
                      <div className="flex items-center">
                        Status
                        <ArrowUpDown className="ml-2 h-4 w-4" />
                      </div>
                    </TableHead>
                    {canEditInventory && <TableHead>Actions</TableHead>}
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredProducts.map((product, index) => (
                    <TableRow key={product.id}>
                      <TableCell className="font-medium">
                        <button 
                          className="hover:text-primary hover:underline focus:outline-none text-left"
                          onClick={() => {
                            setSelectedProduct(product);
                            setProductDetailsDialogOpen(true);
                          }}
                        >
                          {product.name}
                        </button>
                      </TableCell>
                      <TableCell>{product.brand}</TableCell>
                      <TableCell>
                        <Badge variant="outline">{product.category}</Badge>
                      </TableCell>
                      <TableCell>
                        <button 
                          className="hover:text-primary focus:outline-none text-left"
                          onClick={() => {
                            setSelectedProduct(product);
                            setProductDetailsDialogOpen(true);
                          }}
                        >
                          {product.sku}
                        </button>
                      </TableCell>
                      <TableCell className="text-right">₦{(product.price / 100).toLocaleString()}</TableCell>
                      <TableCell className="text-right">{product.quantity}</TableCell>
                      <TableCell className="text-right">{product.storeQuantity}</TableCell>
                      <TableCell>
                        {product.status === 'in-stock' && (
                          <Badge className="bg-emerald-100 text-emerald-700 hover:bg-emerald-100">In Stock</Badge>
                        )}
                        {product.status === 'low-stock' && (
                          <Badge className="bg-amber-100 text-amber-700 hover:bg-amber-100">Low Stock</Badge>
                        )}
                        {product.status === 'out-of-stock' && (
                          <Badge className="bg-rose-100 text-rose-700 hover:bg-rose-100">Out of Stock</Badge>
                        )}
                      </TableCell>
                      {canEditInventory && (
                        <TableCell>
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="icon">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-4 w-4">
                                  <circle cx="12" cy="12" r="1"/>
                                  <circle cx="19" cy="12" r="1"/>
                                  <circle cx="5" cy="12" r="1"/>
                                </svg>
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuLabel>Actions</DropdownMenuLabel>
                              <DropdownMenuItem 
                                onClick={() => {
                                  setSelectedProduct(product);
                                  setProductDetailsDialogOpen(true);
                                }}
                              >
                                <Search className="h-4 w-4 mr-2" />
                                View Details
                              </DropdownMenuItem>
                              <DropdownMenuItem 
                                onClick={() => {
                                  setSelectedProduct(product);
                                  setAddStockDialogOpen(true);
                                }}
                              >
                                <Plus className="h-4 w-4 mr-2" />
                                Add Inventory
                              </DropdownMenuItem>
                              <DropdownMenuItem>
                                <Edit className="h-4 w-4 mr-2" />
                                Edit Product
                              </DropdownMenuItem>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem className="text-rose-500">
                                <Trash2 className="h-4 w-4 mr-2" />
                                Delete Product
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      )}
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
        
        <CardFooter className="px-6 py-4 flex items-center justify-between">
          <div className="text-muted-foreground text-sm">
            Showing {filteredProducts.length} of {products.length} products
          </div>
          
          <div className="flex items-center space-x-2">
            <AnimatedButton variant="outline" className="h-8 px-3 text-xs" disabled>Previous</AnimatedButton>
            <AnimatedButton variant="outline" className="h-8 px-3 text-xs" disabled>Next</AnimatedButton>
          </div>
        </CardFooter>
      </Card>
      
      {/* Add Stock Dialog */}
      <Dialog open={addStockDialogOpen} onOpenChange={setAddStockDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Add Inventory</DialogTitle>
            <DialogDescription>
              Update the stock quantity for this product.
            </DialogDescription>
          </DialogHeader>
          
          {selectedProduct && (
            <div className="space-y-4 py-4">
              <div className="flex items-center space-x-2">
                <div className="w-12 h-12 rounded bg-primary/10 flex items-center justify-center text-primary font-medium">
                  {selectedProduct.name.substring(0, 2).toUpperCase()}
                </div>
                <div>
                  <h4 className="font-medium">{selectedProduct.name}</h4>
                  <p className="text-sm text-muted-foreground">{selectedProduct.sku}</p>
                </div>
              </div>
              
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="current-qty" className="text-right">
                    Current Stock
                  </Label>
                  <div className="col-span-3 flex gap-4">
                    <div className="flex flex-col">
                      <span className="text-sm text-muted-foreground">Warehouse</span>
                      <span className="font-medium">{selectedProduct.quantity}</span>
                    </div>
                    <div className="flex flex-col">
                      <span className="text-sm text-muted-foreground">Store</span>
                      <span className="font-medium">{selectedProduct.storeQuantity}</span>
                    </div>
                  </div>
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="add-qty" className="text-right">
                    Add Quantity
                  </Label>
                  <Input
                    id="add-qty"
                    type="number"
                    min={1}
                    value={stockToAdd}
                    onChange={(e) => setStockToAdd(parseInt(e.target.value) || 0)}
                    className="col-span-3"
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="stock-location" className="text-right">
                    Location
                  </Label>
                  <Select value={stockLocation} onValueChange={(val) => setStockLocation(val as 'store' | 'warehouse')}>
                    <SelectTrigger className="col-span-3">
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="store">Store</SelectItem>
                      <SelectItem value="warehouse">Warehouse</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>
          )}
          
          <DialogFooter>
            <AnimatedButton variant="outline" onClick={() => setAddStockDialogOpen(false)} className="bg-transparent border border-input hover:bg-accent">
              Cancel
            </AnimatedButton>
            <AnimatedButton onClick={handleAddStock} disabled={isUpdatingStock || stockToAdd <= 0} className="bg-primary text-primary-foreground">
              {isUpdatingStock && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Save Changes
            </AnimatedButton>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* Product Details Dialog */}
      <Dialog open={productDetailsDialogOpen} onOpenChange={setProductDetailsDialogOpen}>
        <DialogContent className="sm:max-w-[650px] max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Product Details</DialogTitle>
            <DialogDescription>
              Detailed information about the selected product.
            </DialogDescription>
          </DialogHeader>
          
          {selectedProduct && (
            <div className="space-y-6 py-4">
              {/* Product header */}
              <div className="flex items-start space-x-4">
                <div className="w-20 h-20 rounded bg-primary/10 flex items-center justify-center text-primary font-medium text-2xl">
                  {selectedProduct.name.substring(0, 2).toUpperCase()}
                </div>
                <div className="flex-1">
                  <h2 className="text-xl font-semibold">{selectedProduct.name}</h2>
                  <p className="text-sm text-muted-foreground">
                    {selectedProduct.brand} • {selectedProduct.category} • {selectedProduct.subcategory}
                  </p>
                  {selectedProduct.status === 'in-stock' && (
                    <Badge className="mt-2 bg-emerald-100 text-emerald-700 hover:bg-emerald-100">In Stock</Badge>
                  )}
                  {selectedProduct.status === 'low-stock' && (
                    <Badge className="mt-2 bg-amber-100 text-amber-700 hover:bg-amber-100">Low Stock</Badge>
                  )}
                  {selectedProduct.status === 'out-of-stock' && (
                    <Badge className="mt-2 bg-rose-100 text-rose-700 hover:bg-rose-100">Out of Stock</Badge>
                  )}
                </div>
                <div className="text-right">
                  <p className="text-lg font-semibold">₦{(selectedProduct.price / 100).toLocaleString()}</p>
                  {selectedProduct.discountPrice < selectedProduct.price && (
                    <p className="text-sm text-muted-foreground line-through">
                      ₦{(selectedProduct.discountPrice / 100).toLocaleString()}
                    </p>
                  )}
                </div>
              </div>
              
              {/* Product Description Section */}
              {selectedProduct.description ? (
                <div className="bg-muted/30 rounded-md p-4 mt-2">
                  <h3 className="text-lg font-medium mb-2 flex items-center">
                    <FileText className="h-5 w-5 mr-2 text-muted-foreground" />
                    Product Description
                  </h3>
                  <div className="text-sm leading-relaxed whitespace-pre-wrap">
                    {selectedProduct.description}
                  </div>
                  <div className="text-xs text-muted-foreground mt-2 text-right">
                    {selectedProduct.description.length} characters
                  </div>
                </div>
              ) : (
                <div className="bg-muted/30 rounded-md p-4 mt-2 border border-dashed border-muted-foreground/30">
                  <div className="flex items-center justify-between">
                    <h3 className="text-lg font-medium mb-0 flex items-center">
                      <FileText className="h-5 w-5 mr-2 text-muted-foreground" />
                      Product Description
                    </h3>
                    <Badge variant="outline" className="text-muted-foreground">Missing</Badge>
                  </div>
                  <p className="text-sm text-muted-foreground mt-2">
                    This product does not have a description. Descriptions help customers understand product features and benefits.
                  </p>
                </div>
              )}
              
              <Separator />
              
              {/* Inventory section */}
              <div>
                <h3 className="text-lg font-medium mb-2">Inventory</h3>
                <div className="grid grid-cols-2 gap-4">
                  <Card>
                    <CardHeader className="pb-2">
                      <CardTitle className="text-sm font-medium">Warehouse Quantity</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">{selectedProduct.quantity}</div>
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardHeader className="pb-2">
                      <CardTitle className="text-sm font-medium">Store Quantity</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">{selectedProduct.storeQuantity}</div>
                    </CardContent>
                  </Card>
                </div>
                
                <div className="mt-4">
                  <div className="mb-2 flex justify-between items-center">
                    <span className="text-sm font-medium">Total Stock Level</span>
                    <span className="text-sm text-muted-foreground">
                      {selectedProduct.quantity + selectedProduct.storeQuantity} units
                    </span>
                  </div>
                  <div className="relative w-full h-2 bg-muted rounded-full overflow-hidden">
                    <div 
                      className={`absolute left-0 top-0 h-full ${
                        selectedProduct.status === 'in-stock' 
                          ? 'bg-emerald-500' 
                          : selectedProduct.status === 'low-stock' 
                            ? 'bg-amber-500' 
                            : 'bg-rose-500'
                      }`}
                      style={{ width: `${Math.min(((selectedProduct.quantity + selectedProduct.storeQuantity) / 100) * 100, 100)}%` }}
                    />
                  </div>
                </div>
              </div>
              
              <Separator />
              
              {/* Product details */}
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h3 className="text-lg font-medium mb-2">Product Information</h3>
                  <dl className="space-y-2">
                    <div className="flex justify-between">
                      <dt className="text-sm font-medium text-muted-foreground">SKU</dt>
                      <dd className="text-sm font-medium">{selectedProduct.sku}</dd>
                    </div>
                    <div className="flex justify-between">
                      <dt className="text-sm font-medium text-muted-foreground">Barcode</dt>
                      <dd className="text-sm font-medium">{selectedProduct.barcode}</dd>
                    </div>
                    <div className="flex justify-between">
                      <dt className="text-sm font-medium text-muted-foreground">Category</dt>
                      <dd className="text-sm font-medium">{selectedProduct.category}</dd>
                    </div>
                    <div className="flex justify-between">
                      <dt className="text-sm font-medium text-muted-foreground">Subcategory</dt>
                      <dd className="text-sm font-medium">{selectedProduct.subcategory}</dd>
                    </div>
                    <div className="flex justify-between">
                      <dt className="text-sm font-medium text-muted-foreground">Brand</dt>
                      <dd className="text-sm font-medium">{selectedProduct.brand}</dd>
                    </div>
                  </dl>
                </div>
                
                <div>
                  <h3 className="text-lg font-medium mb-2">Price Information</h3>
                  <dl className="space-y-2">
                    <div className="flex justify-between">
                      <dt className="text-sm font-medium text-muted-foreground">Regular Price</dt>
                      <dd className="text-sm font-medium">₦{(selectedProduct.price / 100).toLocaleString()}</dd>
                    </div>
                    <div className="flex justify-between">
                      <dt className="text-sm font-medium text-muted-foreground">Discount Price</dt>
                      <dd className="text-sm font-medium">₦{(selectedProduct.discountPrice / 100).toLocaleString()}</dd>
                    </div>
                    <div className="flex justify-between">
                      <dt className="text-sm font-medium text-muted-foreground">Discount</dt>
                      <dd className="text-sm font-medium">
                        {selectedProduct.price > selectedProduct.discountPrice 
                          ? `${Math.round((1 - selectedProduct.discountPrice / selectedProduct.price) * 100)}%` 
                          : '0%'
                        }
                      </dd>
                    </div>
                    <div className="flex justify-between">
                      <dt className="text-sm font-medium text-muted-foreground">Last Updated</dt>
                      <dd className="text-sm font-medium">
                        {new Date(selectedProduct.lastUpdated).toLocaleDateString('en-NG', {
                          day: 'numeric',
                          month: 'short',
                          year: 'numeric',
                          hour: '2-digit',
                          minute: '2-digit'
                        })}
                      </dd>
                    </div>
                  </dl>
                </div>
              </div>
            </div>
          )}
          
          <DialogFooter className="flex justify-between">
            <div>
              {canEditInventory && (
                <AnimatedButton variant="outline" className="mr-2 bg-transparent border border-input hover:bg-accent" onClick={() => {
                  setProductDetailsDialogOpen(false);
                  if (selectedProduct) {
                    setAddStockDialogOpen(true);
                  }
                }}>
                  <Plus className="mr-2 h-4 w-4" />
                  Add Inventory
                </AnimatedButton>
              )}
            </div>
            <AnimatedButton onClick={() => setProductDetailsDialogOpen(false)} className="bg-primary text-primary-foreground">
              Close
            </AnimatedButton>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* New Product Dialog */}
      <Dialog 
        open={newProductDialogOpen} 
        onOpenChange={setNewProductDialogOpen}
      >
        <DialogContent className="sm:max-w-[700px]">
          <DialogHeader>
            <DialogTitle>Add New Product</DialogTitle>
            <DialogDescription>
              Fill in the product details below to add a new item to your inventory.
            </DialogDescription>
          </DialogHeader>
          
          {/* Use our new component-based form for better stability */}
          <NewProductForm 
            onSuccess={(product) => {
              // Add the new product to the list
              const newProductWithStatus = {
                ...product,
                status: (product.quantity + product.storeQuantity) <= 0 ? 'out-of-stock' : 
                       (product.quantity + product.storeQuantity) < 5 ? 'low-stock' : 'in-stock',
                lastUpdated: new Date().toISOString(),
              };
              
              setProducts(prev => [...prev, newProductWithStatus]);
              
              // Close the dialog
              setNewProductDialogOpen(false);
              
              // Show success notification
              toast({
                title: "Product added",
                description: `${product.name} has been added to your inventory.`,
                variant: "default"
              });
            }}
            onCancel={() => setNewProductDialogOpen(false)}
          />
        </DialogContent>
            <div className="grid grid-cols-1 gap-6">
              {/* Essential fields section */}
              <div className="border rounded-md p-4 bg-muted/5">
                <h3 className="text-sm font-medium mb-3">Essential Information</h3>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="name" className="text-right">
                      Product Name <span className="text-red-500">*</span>
                    </Label>
                    <Input
                      id="name"
                      placeholder="Enter product name"
                      value={inputValues.name}
                      onChange={(e) => {
                        // Update the UI state immediately
                        setInputValues(prev => ({ ...prev, name: e.target.value }));
                        // Update the actual data with a small delay
                        setTimeout(() => {
                          setNewProduct(prev => ({ ...prev, name: e.target.value }));
                        }, 300);
                      }}
                      className="mt-1"
                    />
                    <p className="text-xs text-muted-foreground mt-1">
                      Clear, descriptive name that customers will see
                    </p>
                  </div>
                </div>
              </div>
              
              {/* Categorization section */}
              <div className="border rounded-md p-4 bg-muted/5">
                <h3 className="text-sm font-medium mb-3">Categorization</h3>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="brand" className="text-right">
                      Brand <span className="text-red-500">*</span>
                    </Label>
                    <Input
                      id="brand"
                      placeholder="Enter brand name"
                      value={inputValues.brand}
                      onChange={(e) => {
                        // Update UI state immediately
                        setInputValues(prev => ({ ...prev, brand: e.target.value }));
                        // Update data state with delay
                        setTimeout(() => {
                          setNewProduct(prev => ({ ...prev, brand: e.target.value }));
                        }, 300);
                      }}
                      className="mt-1"
                    />
                  </div>
                
                  <div>
                    <Label htmlFor="category" className="text-right">
                      Category <span className="text-red-500">*</span>
                    </Label>
                    <Select 
                      value={inputValues.category || newProduct.category} 
                      onValueChange={(value) => {
                        // Update UI state immediately
                        setInputValues(prev => ({ ...prev, category: value }));
                        // Update data state with delay
                        setTimeout(() => {
                          setNewProduct(prev => ({ ...prev, category: value }));
                        }, 300);
                      }}
                    >
                      <SelectTrigger className="mt-1">
                        <SelectValue placeholder="Select category" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="women">Women</SelectItem>
                        <SelectItem value="men">Men</SelectItem>
                        <SelectItem value="bags">Bags</SelectItem>
                        <SelectItem value="jewelry">Jewelry</SelectItem>
                        <SelectItem value="accessories">Accessories</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                
                  <div>
                    <Label htmlFor="subcategory" className="text-right">
                      Subcategory <span className="text-red-500">*</span>
                    </Label>
                    <Input
                      id="subcategory"
                      placeholder="E.g. Dresses, Shoes, Watches"
                      value={inputValues.subcategory}
                      onChange={(e) => {
                        // Update UI state immediately
                        setInputValues(prev => ({ ...prev, subcategory: e.target.value }));
                        // Update data state with delay
                        setTimeout(() => {
                          setNewProduct(prev => ({ ...prev, subcategory: e.target.value }));
                        }, 300);
                      }}
                      className="mt-1"
                    />
                    <p className="text-xs text-muted-foreground mt-1">
                      Specific type of item within the category
                    </p>
                  </div>
                </div>
              </div>
              
              {/* Description section */}
              <div className="border rounded-md p-4 bg-muted/5">
                <h3 className="text-sm font-medium mb-3">Description</h3>
                <div>
                  <Label htmlFor="description" className="text-right">
                    Product Description <span className="text-red-500">*</span>
                  </Label>
                  <div className="relative">
                    <textarea
                      id="description"
                      placeholder="A short description of the product"
                      value={inputValues.description}
                      onChange={(e) => {
                        const newValue = e.target.value;
                        // Update local state immediately for responsive UI
                        setInputValues(prev => ({
                          ...prev,
                          description: newValue
                        }));
                        // Update newProduct state with optimized debounce
                        if (descriptionTimeoutRef.current) {
                          clearTimeout(descriptionTimeoutRef.current);
                        }
                        descriptionTimeoutRef.current = setTimeout(() => {
                          setNewProduct(prev => ({
                            ...prev,
                            description: newValue
                          }));
                        }, 300);
                      }}
                      className="flex w-full rounded-md border border-input bg-background px-3 py-2 mt-1 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                      rows={2}
                    />
                    <div className="absolute bottom-2 right-2 text-xs text-muted-foreground opacity-80">
                      <span className={inputValues.description.length < 10 ? "text-rose-500" : "text-green-500"}>
                        {inputValues.description.length}
                      </span>
                    </div>
                  </div>
                  <p className="text-xs text-muted-foreground mt-1">
                    A brief description is adequate (minimum 10 characters)
                  </p>
                </div>
              </div>
              
              {/* Images section */}
              <div className="border rounded-md p-4 bg-muted/5">
                <h3 className="text-sm font-medium mb-3">Product Images</h3>
                <div>
                  <div className="flex flex-wrap gap-3 mb-4">
                    {imagePreviews.map((preview, index) => (
                      <div key={index} className="relative w-20 h-20 overflow-hidden rounded border">
                        <img 
                          src={preview} 
                          alt={`Preview ${index+1}`} 
                          className="object-cover w-full h-full"
                        />
                        <button
                          type="button"
                          onClick={() => removeImage(index)}
                          className="absolute top-1 right-1 bg-red-500 text-white p-1 rounded-full w-5 h-5 flex items-center justify-center"
                        >
                          <X className="w-3 h-3" />
                        </button>
                      </div>
                    ))}
                    
                    {imagePreviews.length < 5 && (
                      <label className="flex flex-col items-center justify-center w-20 h-20 rounded border border-dashed border-gray-300 cursor-pointer hover:bg-gray-50 transition-colors">
                        <ImageIcon className="w-6 h-6 text-gray-400 mb-1" />
                        <span className="text-xs text-gray-500">Add Image</span>
                        <input
                          type="file"
                          accept="image/*"
                          className="hidden"
                          multiple={imagePreviews.length === 0}
                          onChange={handleImageUpload}
                        />
                      </label>
                    )}
                  </div>
                  <p className="text-xs text-muted-foreground">
                    Images optional. You can add them later.
                  </p>
                </div>
              </div>
              
              {/* Pricing section */}
              <div className="border rounded-md p-4 bg-muted/5">
                <h3 className="text-sm font-medium mb-3">Pricing</h3>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="price" className="text-right">
                      Price (₦) <span className="text-red-500">*</span>
                    </Label>
                    <Input
                      id="price"
                      type="number"
                      placeholder="Enter price in Naira"
                      value={inputValues.price === '' ? '' : inputValues.price}
                      onChange={(e) => {
                        // Update UI state immediately
                        setInputValues(prev => ({ ...prev, price: e.target.value }));
                        // Update data state with delay
                        setTimeout(() => {
                          setNewProduct(prev => ({ ...prev, price: Number(e.target.value) }));
                        }, 300);
                      }}
                      className="mt-1"
                    />
                  </div>
                
                  <div>
                    <Label htmlFor="discountPrice" className="text-right">
                      Discount Price (₦)
                    </Label>
                    <Input
                      id="discountPrice"
                      type="number"
                      placeholder="Same as regular price if empty"
                      value={inputValues.discountPrice === '' ? '' : inputValues.discountPrice}
                      onChange={(e) => {
                        // Update UI state immediately
                        setInputValues(prev => ({ ...prev, discountPrice: e.target.value }));
                        // Update data state with delay
                        setTimeout(() => {
                          setNewProduct(prev => ({ ...prev, discountPrice: Number(e.target.value) }));
                        }, 300);
                      }}
                      className="mt-1"
                    />
                  </div>
                </div>
              </div>
              
              {/* Inventory section */}
              <div className="border rounded-md p-4 bg-muted/5">
                <h3 className="text-sm font-medium mb-3">Inventory</h3>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="quantity" className="text-right">
                      Warehouse Quantity
                    </Label>
                    <Input
                      id="quantity"
                      type="number"
                      placeholder="0"
                      value={inputValues.quantity === '' ? '' : inputValues.quantity}
                      onChange={(e) => {
                        // Update UI state immediately
                        setInputValues(prev => ({ ...prev, quantity: e.target.value }));
                        // Update data state with delay
                        setTimeout(() => {
                          setNewProduct(prev => ({ ...prev, quantity: Number(e.target.value) }));
                        }, 300);
                      }}
                      className="mt-1"
                    />
                  </div>
                
                  <div>
                    <Label htmlFor="storeQuantity" className="text-right">
                      Store Quantity
                    </Label>
                    <Input
                      id="storeQuantity"
                      type="number"
                      placeholder="0"
                      value={inputValues.storeQuantity === '' ? '' : inputValues.storeQuantity}
                      onChange={(e) => {
                        // Update UI state immediately
                        setInputValues(prev => ({ ...prev, storeQuantity: e.target.value }));
                        // Update data state with delay
                        setTimeout(() => {
                          setNewProduct(prev => ({ ...prev, storeQuantity: Number(e.target.value) }));
                        }, 300);
                      }}
                      className="mt-1"
                    />
                  </div>
                </div>
              </div>
              
              {/* Reference codes section */}
              <div className="border rounded-md p-4 bg-muted/5">
                <h3 className="text-sm font-medium mb-3">Reference Codes (Optional)</h3>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="sku" className="text-right">
                      SKU
                    </Label>
                    <Input
                      id="sku"
                      placeholder="Auto-generated if empty"
                      value={inputValues.sku}
                      onChange={(e) => {
                        // Update UI state immediately
                        setInputValues(prev => ({ ...prev, sku: e.target.value }));
                        // Update data state with delay
                        setTimeout(() => {
                          setNewProduct(prev => ({ ...prev, sku: e.target.value }));
                        }, 300);
                      }}
                      className="mt-1"
                    />
                    <p className="text-xs text-muted-foreground mt-1">
                      Stock Keeping Unit code for internal reference
                    </p>
                  </div>
                
                  <div>
                    <Label htmlFor="barcode" className="text-right">
                      Barcode
                    </Label>
                    <Input
                      id="barcode"
                      placeholder="Auto-generated if empty"
                      value={inputValues.barcode}
                      onChange={(e) => {
                        // Update UI state immediately
                        setInputValues(prev => ({ ...prev, barcode: e.target.value }));
                        // Update data state with delay
                        setTimeout(() => {
                          setNewProduct(prev => ({ ...prev, barcode: e.target.value }));
                        }, 300);
                      }}
                      className="mt-1"
                    />
                    <p className="text-xs text-muted-foreground mt-1">
                      Used for inventory scanning
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <DialogFooter>
            <AnimatedButton variant="outline" onClick={() => setNewProductDialogOpen(false)} className="bg-transparent border border-input hover:bg-accent">
              Cancel
            </AnimatedButton>
            <AnimatedButton 
              onClick={handleAddProduct}
              disabled={isAddingProduct}
              className="bg-primary text-primary-foreground"
            >
              {isAddingProduct && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Add Product
            </AnimatedButton>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </AnimationWrapper>
  </AdminDashboardLayout>
  );
};

export default AdminInventory;